Use AdventureWorks2019

SELECT * FROM MyProducts
SELECT * FROM #MyProductsBackup
--DROP Table #MyProductsBackup
--Trigger:::

CREATE TABLE #MyProductsBackup
(
	ProductID INT,
	Name VARCHAR(50),
	Color VARCHAR(20),
	StandardCost MONEY
)

--Create a trigger to backup the deleted records from MyProducts table

--DROP TRIGGER tr_del_myprods
CREATE TRIGGER tr_del_myprods 
ON MyProducts
AFTER DELETE	
AS
BEGIN
	INSERT INTO #MyProductsBackup
	SELECT ProductID,Name,Color,StandardCost FROM deleted;
	Print 'Record Deleted and backed up!'
END

DELETE FROM MyProducts WHERE ProductID > 990


--DISABLE TRIGGER Tr_PreventDropSP
--ENABLE TRIGGER Tr_PreventDropSP

CREATE TRIGGER Tr_PreventDropSP
ON DATABASE
FOR DROP_PROCEDURE
AS
PRINT 'Dropping Procedure is not allowed. DDL Trigger is preventing this from happening. To drop stored procedure disable the trigger first';
ROLLBACK;
GO 

SELECT * INTO SampleProducts from MyProducts


SELECT * FROM SampleProducts

--DROP TRIGGER tr_backupprods

CREATE TRIGGER tr_backupprods ON SampleProducts
INSTEAD OF DELETE, INSERT, UPDATE
AS
BEGIN
	Print 'hahahaha!!!!'
END;


DELETE FROM SampleProducts WHERE ProductID = 317

/*
Lab 6: Trigger
Q1. Create a trigger to implement banking scenario. Whenever the bank balance is updated for any bank account a transaction is captured in a 
Bank Transaction table. The Bank Transaction table acts as a source to generate bank statements. 
Hint: Need to create two tables (BankAccounts with some rows and BankTransactions with no records) and a trigger for 
Update on Balance column of BankAccounts table.
Table: BankAccounts 
Columns: 
•	AccountID (Numeric- Autogenerated)
•	CustomerName
•	AccountType (Current / Saving)
•	Balance (>0)
•	Modified Date
Table: BankTransactions
Columns
•	TransactionID (Numeric- Autogenerated)
•	AccountID (FK)
•	TransactionDate
•	TransactionType (Debit / Credit)
•	TransactionAmount
*/
---------------------------------------------------------------------------------------
--Exception Handling

--Execption is a runtime error
--:::::: System / User Defined

BEGIN TRY
	Declare @username VARCHAR(10);
	Declare @x INT;
	Declare @y INT;
	SET @x=20;
	SET @y=2;
	RAISERROR('Salary must be greater than 5000!',16,0) -- User Defined Exception
	Print @x;
	Print @y;
	Print @x/@y;
	SET @username ='Sam Patankar';
	Print @username;
END TRY
BEGIN CATCH
SELECT ERROR_NUMBER(), ERROR_MESSAGE();
	IF  ERROR_NUMBER()=8134
		Print 'Divide By Zero Error!'
	IF	ERROR_NUMBER()=245
		Print 'Conversion Error!'
END CATCH

/*
Lab 7: Exception Handling
Q1.	Create a procedure that takes a string parameter. The input string may be a string or a numeric or NULL value. 
Convert the string to Integer. If it cannot be converted write an exception handling section to handle the appropriate error. 
If the string is converted to integer print Hello the input integer number of times
Q2.	Create a temp table to represent employees. Design a user defined exception to handle the salary input less than 10000. 

*/

------------------------------------------------------------------------------
--- TRANSACTIONS
/*
Lab 8: Transactions and Deadlock
Q1.Document your understanding and possible solutions to Deadlock concept [Hint: You may explore online]
*/
